diff -Naur blankon-installer-1.28.orig/scripts/b-i-setup-fs blankon-installer-1.28/scripts/b-i-setup-fs
--- blankon-installer-1.28.orig/scripts/b-i-setup-fs	2016-07-26 14:15:29.000000000 +0700
+++ blankon-installer-1.28/scripts/b-i-setup-fs	2016-07-27 15:58:46.469455032 +0700
@@ -192,7 +192,7 @@
 for i in `cat $ROOTFS/tmp/swaps`;do
     mkswap $i
     UUID=`lsblk -no UUID $i`
-    echo "$UUID    none    swap    sw  0   0" >> $ROOTFS/target/etc/fstab
+    echo "UUID=$UUID    none    swap    sw  0   0" >> $ROOTFS/target/etc/fstab
 done
 
 
diff -Naur blankon-installer-1.28.orig/src/installer.vala blankon-installer-1.28/src/installer.vala
--- blankon-installer-1.28.orig/src/installer.vala	2016-07-26 14:15:29.000000000 +0700
+++ blankon-installer-1.28/src/installer.vala	2016-07-27 16:04:48.249475400 +0700
@@ -551,12 +551,20 @@
             do_simple_command_with_args (c, Step.MOUNTHOME, "mounting_home_filesystem ", "Unable to mount home filesystem");
         
             // write fstab file at tmp, will be copied to /target/etc/fstab by b-i-setup-fs script
-            var content = "UUID=" + backtick("/bin/lsblk -no UUID " + partition_path) + " / ext4 defaults 1 2";
-            Utils.write_simple_file ("/tmp/fstab", content);
-            content = "UUID=" + backtick("/bin/lsblk -no UUID " + home) + " /home ext4 defaults 1 2";
+            var root_partition = backtick("/bin/lsblk -no UUID " + partition_path);
+            var home_partition = backtick("/bin/lsblk -no UUID " + home);
+
+            var content = "UUID=" + root_partition + " / ext4 defaults 1 2\n";
+                content += "UUID=" + home_partition + " /home ext4 defaults 1 2\n";
             Utils.write_simple_file ("/tmp/fstab", content);
 
         } else {
+            // write fstab file at tmp, will be copied to /target/etc/fstab by b-i-setup-fs script
+            var root_partition = backtick("/bin/lsblk -no UUID " + partition_path);
+   
+            var content = "UUID=" + root_partition + " / ext4 defaults 1 2\n";
+            Utils.write_simple_file ("/tmp/fstab", content);
+
             last_step = Step.MOUNTHOME;
             do_next_job ();
         }
@@ -678,7 +686,7 @@
         int exitCode;
         string std_out;
         Process.spawn_command_line_sync(command, out std_out, null, out exitCode);
-        return std_out;
+        return std_out.replace("/n", "");
       }
       catch (GLib.Error e){
         Log.instance().log ("Error running: " + e.message);
